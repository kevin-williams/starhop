{"ast":null,"code":"import _taggedTemplateLiteral from \"@babel/runtime-corejs2/helpers/esm/taggedTemplateLiteral\";\nvar _jsxFileName = \"/Users/kwilliams/repositories/starhop/components/starmap/StarMap.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n  query dsos($rangeInput: Object!) {\\n    dsos(input: $rangeInput) @client\\n    stars(input: $rangeInput) @client\\n  }\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport { gql } from 'apollo-boost';\nimport { useQuery } from '@apollo/react-hooks';\nimport styled from 'styled-components';\nimport Star from './Star';\nimport { getXYCoordinates } from '../../utils';\nvar StarMapDiv = styled.div.withConfig({\n  displayName: \"StarMap__StarMapDiv\",\n  componentId: \"sc-1wurmqy-0\"\n})([\"width:\", \";height:\", \";\"], function (props) {\n  return props.size;\n}, function (props) {\n  return props.size;\n});\nvar StarMapCanvas = styled.svg.withConfig({\n  displayName: \"StarMap__StarMapCanvas\",\n  componentId: \"sc-1wurmqy-1\"\n})([\"background-color:black;\"]);\nvar DATA_QUERY = gql(_templateObject());\n\nvar StarMap = function StarMap(_ref) {\n  var size = _ref.size,\n      mapRange = _ref.mapRange,\n      mapParams = _ref.mapParams;\n  var raFrom = mapRange.raFrom,\n      raTo = mapRange.raTo,\n      decFrom = mapRange.decFrom,\n      decTo = mapRange.decTo;\n\n  var _useQuery = useQuery(DATA_QUERY, {\n    variables: {\n      rangeInput: {\n        raFrom: raFrom,\n        raTo: raTo,\n        decFrom: decFrom,\n        decTo: decTo\n      }\n    }\n  }),\n      client = _useQuery.client,\n      data = _useQuery.data,\n      loading = _useQuery.loading,\n      refetch = _useQuery.refetch;\n\n  !loading && console.log('stars=', data.stars);\n\n  var _getXYCoordinates = getXYCoordinates(mapParams.ra, mapParams.dec),\n      x = _getXYCoordinates.x,\n      y = _getXYCoordinates.y;\n\n  return __jsx(StarMapDiv, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36\n    },\n    __self: this\n  }, __jsx(StarMapCanvas, {\n    fill: \"lightGrey\",\n    width: 1080,\n    height: 1080,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37\n    },\n    __self: this\n  }, __jsx(\"defs\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38\n    },\n    __self: this\n  }, __jsx(\"radialGradient\", {\n    id: \"StarGradient\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39\n    },\n    __self: this\n  }, __jsx(\"stop\", {\n    offset: \"0%\",\n    stopColor: \"lightGrey\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40\n    },\n    __self: this\n  }), __jsx(\"stop\", {\n    offset: \"100%\",\n    stopColor: \"black\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41\n    },\n    __self: this\n  })), __jsx(\"clipPath\", {\n    id: \"viewport\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43\n    },\n    __self: this\n  }, __jsx(\"circle\", {\n    cx: x,\n    cy: y,\n    r: size / 2,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44\n    },\n    __self: this\n  }))), !loading && data.stars.map(function (star, index) {\n    if (Number(star.mag) > mapParams.limitingMag) return null;\n    return __jsx(Star, {\n      key: \"star-\".concat(index),\n      star: star,\n      mapRange: mapRange,\n      clipPath: \"viewport\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52\n      },\n      __self: this\n    });\n  })));\n};\n\nexport default StarMap;","map":{"version":3,"sources":["/Users/kwilliams/repositories/starhop/components/starmap/StarMap.js"],"names":["gql","useQuery","styled","Star","getXYCoordinates","StarMapDiv","div","props","size","StarMapCanvas","svg","DATA_QUERY","StarMap","mapRange","mapParams","raFrom","raTo","decFrom","decTo","variables","rangeInput","client","data","loading","refetch","console","log","stars","ra","dec","x","y","map","star","index","Number","mag","limitingMag"],"mappings":"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","sourcesContent":["import { gql } from 'apollo-boost';\nimport { useQuery } from '@apollo/react-hooks';\nimport styled from 'styled-components';\n\nimport Star from './Star';\nimport { getXYCoordinates } from '../../utils';\n\nconst StarMapDiv = styled.div`\n  width: ${props => props.size};\n  height: ${props => props.size};\n`;\n\nconst StarMapCanvas = styled.svg`\n  background-color: black;\n`;\n\nconst DATA_QUERY = gql`\n  query dsos($rangeInput: Object!) {\n    dsos(input: $rangeInput) @client\n    stars(input: $rangeInput) @client\n  }\n`;\n\nconst StarMap = ({ size, mapRange, mapParams }) => {\n  const { raFrom, raTo, decFrom, decTo } = mapRange;\n\n  const { client, data, loading, refetch } = useQuery(DATA_QUERY, {\n    variables: { rangeInput: { raFrom, raTo, decFrom, decTo } }\n  });\n\n  !loading && console.log('stars=', data.stars);\n\n  const { x, y } = getXYCoordinates(mapParams.ra, mapParams.dec);\n\n  return (\n    <StarMapDiv>\n      <StarMapCanvas fill=\"lightGrey\" width={1080} height={1080}>\n        <defs>\n          <radialGradient id=\"StarGradient\">\n            <stop offset=\"0%\" stopColor=\"lightGrey\" />\n            <stop offset=\"100%\" stopColor=\"black\" />\n          </radialGradient>\n          <clipPath id=\"viewport\">\n            <circle cx={x} cy={y} r={size / 2} />\n          </clipPath>\n        </defs>\n\n        {!loading &&\n          data.stars.map((star, index) => {\n            if (Number(star.mag) > mapParams.limitingMag) return null;\n            return (\n              <Star\n                key={`star-${index}`}\n                star={star}\n                mapRange={mapRange}\n                clipPath=\"viewport\"\n              />\n            );\n          })}\n      </StarMapCanvas>\n    </StarMapDiv>\n  );\n};\n\nexport default StarMap;\n"]},"metadata":{},"sourceType":"module"}