{"ast":null,"code":"import _Object$defineProperty from \"@babel/runtime-corejs2/core-js/object/define-property\";\nimport _Object$defineProperties from \"@babel/runtime-corejs2/core-js/object/define-properties\";\nimport _Object$getOwnPropertyDescriptors from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptors\";\nimport _Object$getOwnPropertyDescriptor from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptor\";\nimport _Object$getOwnPropertySymbols from \"@babel/runtime-corejs2/core-js/object/get-own-property-symbols\";\nimport _Object$keys from \"@babel/runtime-corejs2/core-js/object/keys\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = _Object$keys(object); if (_Object$getOwnPropertySymbols) { var symbols = _Object$getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return _Object$getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (_Object$getOwnPropertyDescriptors) { _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { _Object$defineProperty(target, key, _Object$getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { ApolloClient, HttpLink, InMemoryCache } from 'apollo-boost';\nimport fetch from 'isomorphic-unfetch';\nvar resolvers = {\n  dsos: function dsos(obj, _ref, context, info) {\n    var raFrom = _ref.raFrom,\n        raTo = _ref.raTo,\n        decFrom = _ref.decFrom,\n        decTo = _ref.decTo;\n    console.log('getting Dsos', raFrom, raTo, decFrom, decTo);\n    return [];\n  }\n};\nvar defaults = {\n  hopSelection: {\n    __typename: 'hopSelection'\n  },\n  location: {\n    ra: 0,\n    dec: 0,\n    __typename: 'location'\n  }\n};\nexport var client = new ApolloClient({\n  cache: new InMemoryCache(),\n  link: new HttpLink({\n    fetch: fetch\n  }),\n  resolvers: resolvers\n});\nexport default client;\n\nvar reset = function reset() {\n  client.writeData({\n    data: _objectSpread({}, defaults)\n  });\n};\n\nreset();\nclient.onResetStore(function () {\n  return reset();\n});","map":{"version":3,"sources":["/Users/kwilliams/repositories/starhop/utils/apolloClient.js"],"names":["ApolloClient","HttpLink","InMemoryCache","fetch","resolvers","dsos","obj","context","info","raFrom","raTo","decFrom","decTo","console","log","defaults","hopSelection","__typename","location","ra","dec","client","cache","link","reset","writeData","data","onResetStore"],"mappings":";;;;;;;;;;;;AAAA,SAASA,YAAT,EAAuBC,QAAvB,EAAiCC,aAAjC,QAAsD,cAAtD;AACA,OAAOC,KAAP,MAAkB,oBAAlB;AAEA,IAAMC,SAAS,GAAG;AAChBC,EAAAA,IAAI,EAAE,cAACC,GAAD,QAAwCC,OAAxC,EAAiDC,IAAjD,EAA0D;AAAA,QAAlDC,MAAkD,QAAlDA,MAAkD;AAAA,QAA1CC,IAA0C,QAA1CA,IAA0C;AAAA,QAApCC,OAAoC,QAApCA,OAAoC;AAAA,QAA3BC,KAA2B,QAA3BA,KAA2B;AAC9DC,IAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ,EAA4BL,MAA5B,EAAoCC,IAApC,EAA0CC,OAA1C,EAAmDC,KAAnD;AACA,WAAO,EAAP;AACD;AAJe,CAAlB;AAOA,IAAMG,QAAQ,GAAG;AACfC,EAAAA,YAAY,EAAE;AACZC,IAAAA,UAAU,EAAE;AADA,GADC;AAIfC,EAAAA,QAAQ,EAAE;AACRC,IAAAA,EAAE,EAAE,CADI;AAERC,IAAAA,GAAG,EAAE,CAFG;AAGRH,IAAAA,UAAU,EAAE;AAHJ;AAJK,CAAjB;AAWA,OAAO,IAAMI,MAAM,GAAG,IAAIrB,YAAJ,CAAiB;AACrCsB,EAAAA,KAAK,EAAE,IAAIpB,aAAJ,EAD8B;AAErCqB,EAAAA,IAAI,EAAE,IAAItB,QAAJ,CAAa;AAAEE,IAAAA,KAAK,EAALA;AAAF,GAAb,CAF+B;AAGrCC,EAAAA,SAAS,EAATA;AAHqC,CAAjB,CAAf;AAMP,eAAeiB,MAAf;;AAEA,IAAMG,KAAK,GAAG,SAARA,KAAQ,GAAM;AAClBH,EAAAA,MAAM,CAACI,SAAP,CAAiB;AACfC,IAAAA,IAAI,oBACCX,QADD;AADW,GAAjB;AAKD,CAND;;AAQAS,KAAK;AAELH,MAAM,CAACM,YAAP,CAAoB;AAAA,SAAMH,KAAK,EAAX;AAAA,CAApB","sourcesContent":["import { ApolloClient, HttpLink, InMemoryCache } from 'apollo-boost';\nimport fetch from 'isomorphic-unfetch';\n\nconst resolvers = {\n  dsos: (obj, { raFrom, raTo, decFrom, decTo }, context, info) => {\n    console.log('getting Dsos', raFrom, raTo, decFrom, decTo);\n    return [];\n  }\n};\n\nconst defaults = {\n  hopSelection: {\n    __typename: 'hopSelection'\n  },\n  location: {\n    ra: 0,\n    dec: 0,\n    __typename: 'location'\n  }\n};\n\nexport const client = new ApolloClient({\n  cache: new InMemoryCache(),\n  link: new HttpLink({ fetch }),\n  resolvers\n});\n\nexport default client;\n\nconst reset = () => {\n  client.writeData({\n    data: {\n      ...defaults\n    }\n  });\n};\n\nreset();\n\nclient.onResetStore(() => reset());\n"]},"metadata":{},"sourceType":"module"}