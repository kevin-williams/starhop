{"ast":null,"code":"import _Object$defineProperty from \"@babel/runtime-corejs2/core-js/object/define-property\";\nimport _Object$defineProperties from \"@babel/runtime-corejs2/core-js/object/define-properties\";\nimport _Object$getOwnPropertyDescriptors from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptors\";\nimport _Object$getOwnPropertyDescriptor from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptor\";\nimport _Object$getOwnPropertySymbols from \"@babel/runtime-corejs2/core-js/object/get-own-property-symbols\";\nimport _Object$keys from \"@babel/runtime-corejs2/core-js/object/keys\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = _Object$keys(object); if (_Object$getOwnPropertySymbols) { var symbols = _Object$getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return _Object$getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (_Object$getOwnPropertyDescriptors) { _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { _Object$defineProperty(target, key, _Object$getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { ApolloClient, HttpLink, InMemoryCache } from 'apollo-boost';\nimport fetch from 'isomorphic-unfetch';\n\nconst hopData = require('../db/hopData.json');\n\nconst messier = require('../db/messier.json');\n\nconst starCatalog = require('../db/hygfull.json');\n\nconst resolvers = {\n  Query: {\n    hops: () => {\n      return hopData.hops;\n    },\n    dsos: (obj, args, context, info) => {\n      console.log('getting Dsos', args.input);\n      const {\n        raFrom,\n        raTo,\n        decFrom,\n        decTo\n      } = args.input;\n      return messier.dsos.filter(dso => Number(dso.ra) >= raFrom && Number(dso.ra) <= raTo && Number(dso.dec) >= decFrom && Number(dso.dec) <= decTo);\n    },\n    stars: (obj, args, context, info) => {\n      console.log('getting stars', args.input);\n      const {\n        raFrom,\n        raTo,\n        decFrom,\n        decTo\n      } = args.input;\n      return starCatalog.stars.filter(stars => Number(stars.ra) >= raFrom && Number(stars.ra) <= raTo && Number(stars.dec) >= decFrom && Number(stars.dec) <= decTo);\n    }\n  }\n};\nconst defaults = {\n  hopSelection: {\n    __typename: 'hopSelection'\n  },\n  location: {\n    ra: 0,\n    dec: 0,\n    __typename: 'location'\n  },\n  selectedHop: null\n};\nexport const client = new ApolloClient({\n  cache: new InMemoryCache(),\n  link: new HttpLink({\n    fetch\n  }),\n  resolvers\n});\nexport default client;\n\nconst reset = () => {\n  client.writeData({\n    data: _objectSpread({}, defaults)\n  });\n};\n\nreset();\nclient.onResetStore(() => reset());","map":{"version":3,"sources":["/Users/kwilliams/repositories/starhop/utils/apolloClient.js"],"names":["ApolloClient","HttpLink","InMemoryCache","fetch","hopData","require","messier","starCatalog","resolvers","Query","hops","dsos","obj","args","context","info","console","log","input","raFrom","raTo","decFrom","decTo","filter","dso","Number","ra","dec","stars","defaults","hopSelection","__typename","location","selectedHop","client","cache","link","reset","writeData","data","onResetStore"],"mappings":";;;;;;;;;;;;AAAA,SAASA,YAAT,EAAuBC,QAAvB,EAAiCC,aAAjC,QAAsD,cAAtD;AACA,OAAOC,KAAP,MAAkB,oBAAlB;;AAEA,MAAMC,OAAO,GAAGC,OAAO,CAAC,oBAAD,CAAvB;;AACA,MAAMC,OAAO,GAAGD,OAAO,CAAC,oBAAD,CAAvB;;AACA,MAAME,WAAW,GAAGF,OAAO,CAAC,oBAAD,CAA3B;;AAEA,MAAMG,SAAS,GAAG;AAChBC,EAAAA,KAAK,EAAE;AACLC,IAAAA,IAAI,EAAE,MAAM;AACV,aAAON,OAAO,CAACM,IAAf;AACD,KAHI;AAILC,IAAAA,IAAI,EAAE,CAACC,GAAD,EAAMC,IAAN,EAAYC,OAAZ,EAAqBC,IAArB,KAA8B;AAClCC,MAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ,EAA4BJ,IAAI,CAACK,KAAjC;AACA,YAAM;AAAEC,QAAAA,MAAF;AAAUC,QAAAA,IAAV;AAAgBC,QAAAA,OAAhB;AAAyBC,QAAAA;AAAzB,UAAmCT,IAAI,CAACK,KAA9C;AACA,aAAOZ,OAAO,CAACK,IAAR,CAAaY,MAAb,CACLC,GAAG,IACDC,MAAM,CAACD,GAAG,CAACE,EAAL,CAAN,IAAkBP,MAAlB,IACAM,MAAM,CAACD,GAAG,CAACE,EAAL,CAAN,IAAkBN,IADlB,IAEAK,MAAM,CAACD,GAAG,CAACG,GAAL,CAAN,IAAmBN,OAFnB,IAGAI,MAAM,CAACD,GAAG,CAACG,GAAL,CAAN,IAAmBL,KALhB,CAAP;AAOD,KAdI;AAeLM,IAAAA,KAAK,EAAE,CAAChB,GAAD,EAAMC,IAAN,EAAYC,OAAZ,EAAqBC,IAArB,KAA8B;AACnCC,MAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ,EAA6BJ,IAAI,CAACK,KAAlC;AACA,YAAM;AAAEC,QAAAA,MAAF;AAAUC,QAAAA,IAAV;AAAgBC,QAAAA,OAAhB;AAAyBC,QAAAA;AAAzB,UAAmCT,IAAI,CAACK,KAA9C;AACA,aAAOX,WAAW,CAACqB,KAAZ,CAAkBL,MAAlB,CACLK,KAAK,IACHH,MAAM,CAACG,KAAK,CAACF,EAAP,CAAN,IAAoBP,MAApB,IACAM,MAAM,CAACG,KAAK,CAACF,EAAP,CAAN,IAAoBN,IADpB,IAEAK,MAAM,CAACG,KAAK,CAACD,GAAP,CAAN,IAAqBN,OAFrB,IAGAI,MAAM,CAACG,KAAK,CAACD,GAAP,CAAN,IAAqBL,KALlB,CAAP;AAOD;AAzBI;AADS,CAAlB;AA8BA,MAAMO,QAAQ,GAAG;AACfC,EAAAA,YAAY,EAAE;AACZC,IAAAA,UAAU,EAAE;AADA,GADC;AAIfC,EAAAA,QAAQ,EAAE;AACRN,IAAAA,EAAE,EAAE,CADI;AAERC,IAAAA,GAAG,EAAE,CAFG;AAGRI,IAAAA,UAAU,EAAE;AAHJ,GAJK;AASfE,EAAAA,WAAW,EAAE;AATE,CAAjB;AAYA,OAAO,MAAMC,MAAM,GAAG,IAAIlC,YAAJ,CAAiB;AACrCmC,EAAAA,KAAK,EAAE,IAAIjC,aAAJ,EAD8B;AAErCkC,EAAAA,IAAI,EAAE,IAAInC,QAAJ,CAAa;AAAEE,IAAAA;AAAF,GAAb,CAF+B;AAGrCK,EAAAA;AAHqC,CAAjB,CAAf;AAMP,eAAe0B,MAAf;;AAEA,MAAMG,KAAK,GAAG,MAAM;AAClBH,EAAAA,MAAM,CAACI,SAAP,CAAiB;AACfC,IAAAA,IAAI,oBACCV,QADD;AADW,GAAjB;AAKD,CAND;;AAQAQ,KAAK;AAELH,MAAM,CAACM,YAAP,CAAoB,MAAMH,KAAK,EAA/B","sourcesContent":["import { ApolloClient, HttpLink, InMemoryCache } from 'apollo-boost';\nimport fetch from 'isomorphic-unfetch';\n\nconst hopData = require('../db/hopData.json');\nconst messier = require('../db/messier.json');\nconst starCatalog = require('../db/hygfull.json');\n\nconst resolvers = {\n  Query: {\n    hops: () => {\n      return hopData.hops;\n    },\n    dsos: (obj, args, context, info) => {\n      console.log('getting Dsos', args.input);\n      const { raFrom, raTo, decFrom, decTo } = args.input;\n      return messier.dsos.filter(\n        dso =>\n          Number(dso.ra) >= raFrom &&\n          Number(dso.ra) <= raTo &&\n          Number(dso.dec) >= decFrom &&\n          Number(dso.dec) <= decTo\n      );\n    },\n    stars: (obj, args, context, info) => {\n      console.log('getting stars', args.input);\n      const { raFrom, raTo, decFrom, decTo } = args.input;\n      return starCatalog.stars.filter(\n        stars =>\n          Number(stars.ra) >= raFrom &&\n          Number(stars.ra) <= raTo &&\n          Number(stars.dec) >= decFrom &&\n          Number(stars.dec) <= decTo\n      );\n    }\n  }\n};\n\nconst defaults = {\n  hopSelection: {\n    __typename: 'hopSelection'\n  },\n  location: {\n    ra: 0,\n    dec: 0,\n    __typename: 'location'\n  },\n  selectedHop: null\n};\n\nexport const client = new ApolloClient({\n  cache: new InMemoryCache(),\n  link: new HttpLink({ fetch }),\n  resolvers\n});\n\nexport default client;\n\nconst reset = () => {\n  client.writeData({\n    data: {\n      ...defaults\n    }\n  });\n};\n\nreset();\n\nclient.onResetStore(() => reset());\n"]},"metadata":{},"sourceType":"module"}