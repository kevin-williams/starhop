{"ast":null,"code":"var _jsxFileName = \"/Users/kwilliams/repositories/starhop/components/starmap/StarMap.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { gql } from 'apollo-boost';\nimport { useQuery } from '@apollo/react-hooks';\nimport styled from 'styled-components';\nimport Star from './Star';\nimport { getXYCoordinates } from '../../utils';\nconst StarMapDiv = styled.svg.withConfig({\n  displayName: \"StarMap__StarMapDiv\",\n  componentId: \"sc-1wurmqy-0\"\n})([\"background-color:black;\"]);\nconst StarMapCanvas = styled.svg.withConfig({\n  displayName: \"StarMap__StarMapCanvas\",\n  componentId: \"sc-1wurmqy-1\"\n})([\"background-color:black;\"]);\nconst DATA_QUERY = gql`\n  query  {\n    dsos() @client\n    stars() @client\n  }\n`;\n\nconst StarMap = ({\n  size,\n  mapRange,\n  mapParams\n}) => {\n  const {\n    raFrom,\n    raTo,\n    decFrom,\n    decTo\n  } = mapRange;\n  const {\n    client,\n    data,\n    loading,\n    refetch\n  } = useQuery(DATA_QUERY, {\n    variables: {\n      rangeInput: {\n        raFrom,\n        raTo,\n        decFrom,\n        decTo\n      }\n    }\n  });\n  !loading && console.log('stars=', data.stars);\n  const {\n    x,\n    y\n  } = getXYCoordinates(mapParams.ra, mapParams.dec);\n  return __jsx(StarMapDiv, {\n    width: size,\n    height: size,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35\n    },\n    __self: this\n  }, __jsx(\"g\", {\n    transform: `translate(-${x}, -${y})`,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36\n    },\n    __self: this\n  }, __jsx(StarMapCanvas, {\n    fill: \"lightGrey\",\n    width: 1080,\n    height: 1080,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37\n    },\n    __self: this\n  }, __jsx(\"defs\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38\n    },\n    __self: this\n  }, __jsx(\"radialGradient\", {\n    id: \"StarGradient\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39\n    },\n    __self: this\n  }, __jsx(\"stop\", {\n    offset: \"0%\",\n    stopColor: \"lightGrey\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40\n    },\n    __self: this\n  }), __jsx(\"stop\", {\n    offset: \"100%\",\n    stopColor: \"black\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41\n    },\n    __self: this\n  })), mapParams.clipCircle && __jsx(\"clipPath\", {\n    id: \"viewport\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44\n    },\n    __self: this\n  }, __jsx(\"circle\", {\n    cx: size / 2,\n    cy: size / 2,\n    r: size / 2,\n    transform: `translate(${x}, ${y})`,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45\n    },\n    __self: this\n  }))), !loading && data.stars.map((star, index) => {\n    if (Number(star.mag) > mapParams.limitingMag) return null;\n    return __jsx(Star, {\n      key: `star-${index}`,\n      star: star,\n      mapRange: mapRange,\n      clipPath: \"viewport\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59\n      },\n      __self: this\n    });\n  }))));\n};\n\nexport default StarMap;","map":{"version":3,"sources":["/Users/kwilliams/repositories/starhop/components/starmap/StarMap.js"],"names":["gql","useQuery","styled","Star","getXYCoordinates","StarMapDiv","svg","StarMapCanvas","DATA_QUERY","StarMap","size","mapRange","mapParams","raFrom","raTo","decFrom","decTo","client","data","loading","refetch","variables","rangeInput","console","log","stars","x","y","ra","dec","clipCircle","map","star","index","Number","mag","limitingMag"],"mappings":"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","sourcesContent":["import { gql } from 'apollo-boost';\nimport { useQuery } from '@apollo/react-hooks';\nimport styled from 'styled-components';\n\nimport Star from './Star';\nimport { getXYCoordinates } from '../../utils';\n\nconst StarMapDiv = styled.svg`\n  background-color: black;\n`;\n\nconst StarMapCanvas = styled.svg`\n  background-color: black;\n`;\n\nconst DATA_QUERY = gql`\n  query  {\n    dsos() @client\n    stars() @client\n  }\n`;\n\nconst StarMap = ({ size, mapRange, mapParams }) => {\n  const { raFrom, raTo, decFrom, decTo } = mapRange;\n\n  const { client, data, loading, refetch } = useQuery(DATA_QUERY, {\n    variables: { rangeInput: { raFrom, raTo, decFrom, decTo } }\n  });\n\n  !loading && console.log('stars=', data.stars);\n\n  const { x, y } = getXYCoordinates(mapParams.ra, mapParams.dec);\n\n  return (\n    <StarMapDiv width={size} height={size}>\n      <g transform={`translate(-${x}, -${y})`}>\n        <StarMapCanvas fill=\"lightGrey\" width={1080} height={1080}>\n          <defs>\n            <radialGradient id=\"StarGradient\">\n              <stop offset=\"0%\" stopColor=\"lightGrey\" />\n              <stop offset=\"100%\" stopColor=\"black\" />\n            </radialGradient>\n            {mapParams.clipCircle && (\n              <clipPath id=\"viewport\">\n                <circle\n                  cx={size / 2}\n                  cy={size / 2}\n                  r={size / 2}\n                  transform={`translate(${x}, ${y})`}\n                />\n              </clipPath>\n            )}\n          </defs>\n\n          {!loading &&\n            data.stars.map((star, index) => {\n              if (Number(star.mag) > mapParams.limitingMag) return null;\n              return (\n                <Star\n                  key={`star-${index}`}\n                  star={star}\n                  mapRange={mapRange}\n                  clipPath=\"viewport\"\n                />\n              );\n            })}\n        </StarMapCanvas>\n      </g>\n    </StarMapDiv>\n  );\n};\n\nexport default StarMap;\n"]},"metadata":{},"sourceType":"module"}