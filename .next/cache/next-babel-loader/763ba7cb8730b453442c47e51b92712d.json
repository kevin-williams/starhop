{"ast":null,"code":"var _jsxFileName = \"/Users/kwilliams/repositories/starhop/components/starmap/StarMap.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { gql } from 'apollo-boost';\nimport { useQuery } from '@apollo/react-hooks';\nimport styled from 'styled-components';\nimport Star from './Star';\nconst StarMapCanvas = styled.svg.withConfig({\n  displayName: \"StarMap__StarMapCanvas\",\n  componentId: \"sc-1wurmqy-0\"\n})([\"background-color:black;\"]);\nconst DATA_QUERY = gql`\n  query dsos($rangeInput: Object!) {\n    dsos(input: $rangeInput) @client\n    stars(input: $rangeInput) @client\n  }\n`;\n\nconst StarMap = ({\n  size = {},\n  mapRange,\n  mapParams\n}) => {\n  const {\n    width = 500,\n    height = 500\n  } = size;\n  const {\n    raFrom,\n    raTo,\n    decFrom,\n    decTo\n  } = mapRange;\n  const {\n    client,\n    data,\n    loading,\n    refetch\n  } = useQuery(DATA_QUERY, {\n    variables: {\n      rangeInput: {\n        raFrom,\n        raTo,\n        decFrom,\n        decTo\n      }\n    }\n  });\n  !loading && console.log('stars=', data.stars);\n  return __jsx(StarMapCanvas, {\n    fill: \"lightGrey\",\n    width: width,\n    height: height,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29\n    },\n    __self: this\n  }, __jsx(\"defs\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30\n    },\n    __self: this\n  }, __jsx(\"radialGradient\", {\n    id: \"StarGradient\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31\n    },\n    __self: this\n  }, __jsx(\"stop\", {\n    offset: \"0%\",\n    stopColor: \"lightGrey\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32\n    },\n    __self: this\n  }), __jsx(\"stop\", {\n    offset: \"100%\",\n    stopColor: \"black\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33\n    },\n    __self: this\n  })), __jsx(\"clipPath\", {\n    id: \"viewport\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35\n    },\n    __self: this\n  }, __jsx(\"circle\", {\n    x: 100,\n    y: 100,\n    r: 50,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36\n    },\n    __self: this\n  }))), __jsx(\"svg\", {\n    clipPath: \"url(#viewport)\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40\n    },\n    __self: this\n  }, !loading && data.stars.map((star, index) => {\n    if (Number(star.mag) > mapParams.limitingMag) return null;\n    return __jsx(Star, {\n      key: `star-${index}`,\n      star: star,\n      mapRange: mapRange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 45\n      },\n      __self: this\n    });\n  })));\n};\n\nexport default StarMap;","map":{"version":3,"sources":["/Users/kwilliams/repositories/starhop/components/starmap/StarMap.js"],"names":["gql","useQuery","styled","Star","StarMapCanvas","svg","DATA_QUERY","StarMap","size","mapRange","mapParams","width","height","raFrom","raTo","decFrom","decTo","client","data","loading","refetch","variables","rangeInput","console","log","stars","map","star","index","Number","mag","limitingMag"],"mappings":";;;AAAA,SAASA,GAAT,QAAoB,cAApB;AACA,SAASC,QAAT,QAAyB,qBAAzB;AACA,OAAOC,MAAP,MAAmB,mBAAnB;AAEA,OAAOC,IAAP,MAAiB,QAAjB;AAEA,MAAMC,aAAa,GAAGF,MAAM,CAACG,GAAV;AAAA;AAAA;AAAA,+BAAnB;AAIA,MAAMC,UAAU,GAAGN,GAAI;;;;;CAAvB;;AAOA,MAAMO,OAAO,GAAG,CAAC;AAAEC,EAAAA,IAAI,GAAG,EAAT;AAAaC,EAAAA,QAAb;AAAuBC,EAAAA;AAAvB,CAAD,KAAwC;AACtD,QAAM;AAAEC,IAAAA,KAAK,GAAG,GAAV;AAAeC,IAAAA,MAAM,GAAG;AAAxB,MAAgCJ,IAAtC;AACA,QAAM;AAAEK,IAAAA,MAAF;AAAUC,IAAAA,IAAV;AAAgBC,IAAAA,OAAhB;AAAyBC,IAAAA;AAAzB,MAAmCP,QAAzC;AAEA,QAAM;AAAEQ,IAAAA,MAAF;AAAUC,IAAAA,IAAV;AAAgBC,IAAAA,OAAhB;AAAyBC,IAAAA;AAAzB,MAAqCnB,QAAQ,CAACK,UAAD,EAAa;AAC9De,IAAAA,SAAS,EAAE;AAAEC,MAAAA,UAAU,EAAE;AAAET,QAAAA,MAAF;AAAUC,QAAAA,IAAV;AAAgBC,QAAAA,OAAhB;AAAyBC,QAAAA;AAAzB;AAAd;AADmD,GAAb,CAAnD;AAIA,GAACG,OAAD,IAAYI,OAAO,CAACC,GAAR,CAAY,QAAZ,EAAsBN,IAAI,CAACO,KAA3B,CAAZ;AAEA,SACE,MAAC,aAAD;AAAe,IAAA,IAAI,EAAC,WAApB;AAAgC,IAAA,KAAK,EAAEd,KAAvC;AAA8C,IAAA,MAAM,EAAEC,MAAtD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAgB,IAAA,EAAE,EAAC,cAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAM,IAAA,MAAM,EAAC,IAAb;AAAkB,IAAA,SAAS,EAAC,WAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EAEE;AAAM,IAAA,MAAM,EAAC,MAAb;AAAoB,IAAA,SAAS,EAAC,OAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF,CADF,EAKE;AAAU,IAAA,EAAE,EAAC,UAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAQ,IAAA,CAAC,EAAE,GAAX;AAAgB,IAAA,CAAC,EAAE,GAAnB;AAAwB,IAAA,CAAC,EAAE,EAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CALF,CADF,EAWE;AAAK,IAAA,QAAQ,EAAC,gBAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACG,CAACO,OAAD,IACCD,IAAI,CAACO,KAAL,CAAWC,GAAX,CAAe,CAACC,IAAD,EAAOC,KAAP,KAAiB;AAC9B,QAAIC,MAAM,CAACF,IAAI,CAACG,GAAN,CAAN,GAAmBpB,SAAS,CAACqB,WAAjC,EAA8C,OAAO,IAAP;AAC9C,WACE,MAAC,IAAD;AAAM,MAAA,GAAG,EAAG,QAAOH,KAAM,EAAzB;AAA4B,MAAA,IAAI,EAAED,IAAlC;AAAwC,MAAA,QAAQ,EAAElB,QAAlD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF;AAGD,GALD,CAFJ,CAXF,CADF;AAuBD,CAjCD;;AAmCA,eAAeF,OAAf","sourcesContent":["import { gql } from 'apollo-boost';\nimport { useQuery } from '@apollo/react-hooks';\nimport styled from 'styled-components';\n\nimport Star from './Star';\n\nconst StarMapCanvas = styled.svg`\n  background-color: black;\n`;\n\nconst DATA_QUERY = gql`\n  query dsos($rangeInput: Object!) {\n    dsos(input: $rangeInput) @client\n    stars(input: $rangeInput) @client\n  }\n`;\n\nconst StarMap = ({ size = {}, mapRange, mapParams }) => {\n  const { width = 500, height = 500 } = size;\n  const { raFrom, raTo, decFrom, decTo } = mapRange;\n\n  const { client, data, loading, refetch } = useQuery(DATA_QUERY, {\n    variables: { rangeInput: { raFrom, raTo, decFrom, decTo } }\n  });\n\n  !loading && console.log('stars=', data.stars);\n\n  return (\n    <StarMapCanvas fill=\"lightGrey\" width={width} height={height}>\n      <defs>\n        <radialGradient id=\"StarGradient\">\n          <stop offset=\"0%\" stopColor=\"lightGrey\" />\n          <stop offset=\"100%\" stopColor=\"black\" />\n        </radialGradient>\n        <clipPath id=\"viewport\">\n          <circle x={100} y={100} r={50} />\n        </clipPath>\n      </defs>\n\n      <svg clipPath=\"url(#viewport)\">\n        {!loading &&\n          data.stars.map((star, index) => {\n            if (Number(star.mag) > mapParams.limitingMag) return null;\n            return (\n              <Star key={`star-${index}`} star={star} mapRange={mapRange} />\n            );\n          })}\n      </svg>\n    </StarMapCanvas>\n  );\n};\n\nexport default StarMap;\n"]},"metadata":{},"sourceType":"module"}