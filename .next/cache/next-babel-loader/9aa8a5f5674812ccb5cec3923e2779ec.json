{"ast":null,"code":"import _Object$defineProperty from \"@babel/runtime-corejs2/core-js/object/define-property\";\nimport _Object$defineProperties from \"@babel/runtime-corejs2/core-js/object/define-properties\";\nimport _Object$getOwnPropertyDescriptors from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptors\";\nimport _Object$getOwnPropertyDescriptor from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptor\";\nimport _Object$getOwnPropertySymbols from \"@babel/runtime-corejs2/core-js/object/get-own-property-symbols\";\nimport _Object$keys from \"@babel/runtime-corejs2/core-js/object/keys\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = _Object$keys(object); if (_Object$getOwnPropertySymbols) { var symbols = _Object$getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return _Object$getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (_Object$getOwnPropertyDescriptors) { _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { _Object$defineProperty(target, key, _Object$getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport ApolloClient from 'apollo-boost';\nimport fetch from 'isomorphic-unfetch';\nimport { createHttpLink } from 'apollo-link-http';\nvar resolvers = {\n  dsos: function dsos(_ref) {\n    var raFrom = _ref.raFrom,\n        raTo = _ref.raTo,\n        decFrom = _ref.decFrom,\n        decTo = _ref.decTo;\n    return [];\n  }\n};\nvar defaults = {\n  hopSelection: {\n    __typename: 'hopSelection'\n  },\n  location: {\n    ra: 0,\n    dec: 0,\n    __typename: 'location'\n  }\n};\nvar link = createHttpLink({\n  fetch: fetch\n});\nexport var client = new ApolloClient({\n  link: link,\n  resolvers: resolvers\n});\nexport default client;\nexport var reset = function reset() {\n  client.writeData({\n    data: _objectSpread({}, defaults)\n  });\n};\nreset();","map":{"version":3,"sources":["/Users/kwilliams/repositories/starhop/utils/apolloClient.js"],"names":["ApolloClient","fetch","createHttpLink","resolvers","dsos","raFrom","raTo","decFrom","decTo","defaults","hopSelection","__typename","location","ra","dec","link","client","reset","writeData","data"],"mappings":";;;;;;;;;;;;AAAA,OAAOA,YAAP,MAAyB,cAAzB;AACA,OAAOC,KAAP,MAAkB,oBAAlB;AACA,SAASC,cAAT,QAA+B,kBAA/B;AAEA,IAAMC,SAAS,GAAG;AAChBC,EAAAA,IAAI,EAAE,oBAAsC;AAAA,QAAnCC,MAAmC,QAAnCA,MAAmC;AAAA,QAA3BC,IAA2B,QAA3BA,IAA2B;AAAA,QAArBC,OAAqB,QAArBA,OAAqB;AAAA,QAAZC,KAAY,QAAZA,KAAY;AAC1C,WAAO,EAAP;AACD;AAHe,CAAlB;AAMA,IAAMC,QAAQ,GAAG;AACfC,EAAAA,YAAY,EAAE;AACZC,IAAAA,UAAU,EAAE;AADA,GADC;AAIfC,EAAAA,QAAQ,EAAE;AACRC,IAAAA,EAAE,EAAE,CADI;AAERC,IAAAA,GAAG,EAAE,CAFG;AAGRH,IAAAA,UAAU,EAAE;AAHJ;AAJK,CAAjB;AAWA,IAAMI,IAAI,GAAGb,cAAc,CAAC;AAAED,EAAAA,KAAK,EAALA;AAAF,CAAD,CAA3B;AAEA,OAAO,IAAMe,MAAM,GAAG,IAAIhB,YAAJ,CAAiB;AACrCe,EAAAA,IAAI,EAAJA,IADqC;AAGrCZ,EAAAA,SAAS,EAATA;AAHqC,CAAjB,CAAf;AAMP,eAAea,MAAf;AAEA,OAAO,IAAMC,KAAK,GAAG,SAARA,KAAQ,GAAM;AACzBD,EAAAA,MAAM,CAACE,SAAP,CAAiB;AACfC,IAAAA,IAAI,oBACCV,QADD;AADW,GAAjB;AAKD,CANM;AAQPQ,KAAK","sourcesContent":["import ApolloClient from 'apollo-boost';\nimport fetch from 'isomorphic-unfetch';\nimport { createHttpLink } from 'apollo-link-http';\n\nconst resolvers = {\n  dsos: ({ raFrom, raTo, decFrom, decTo }) => {\n    return [];\n  }\n};\n\nconst defaults = {\n  hopSelection: {\n    __typename: 'hopSelection'\n  },\n  location: {\n    ra: 0,\n    dec: 0,\n    __typename: 'location'\n  }\n};\n\nconst link = createHttpLink({ fetch });\n\nexport const client = new ApolloClient({\n  link,\n\n  resolvers\n});\n\nexport default client;\n\nexport const reset = () => {\n  client.writeData({\n    data: {\n      ...defaults\n    }\n  });\n};\n\nreset();\n"]},"metadata":{},"sourceType":"module"}