{"ast":null,"code":"import _Object$defineProperty from \"@babel/runtime-corejs2/core-js/object/define-property\";\nimport _Object$defineProperties from \"@babel/runtime-corejs2/core-js/object/define-properties\";\nimport _Object$getOwnPropertyDescriptors from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptors\";\nimport _Object$getOwnPropertyDescriptor from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptor\";\nimport _Object$getOwnPropertySymbols from \"@babel/runtime-corejs2/core-js/object/get-own-property-symbols\";\nimport _Object$keys from \"@babel/runtime-corejs2/core-js/object/keys\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = _Object$keys(object); if (_Object$getOwnPropertySymbols) { var symbols = _Object$getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return _Object$getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (_Object$getOwnPropertyDescriptors) { _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { _Object$defineProperty(target, key, _Object$getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { ApolloClient, HttpLink, InMemoryCache } from 'apollo-boost';\nimport fetch from 'isomorphic-unfetch';\n\nconst hopData = require('../db/hopData.json');\n\nconst dsos = require('../db/dsos.json');\n\nconst resolvers = {\n  Query: {\n    dsos: (obj, args, context, info) => {\n      console.log('getting Dsos', args.input);\n      const {\n        raFrom,\n        raTo,\n        decFrom,\n        decTo\n      } = args.input;\n      return [];\n    }\n  }\n};\nconst defaults = {\n  hopSelection: {\n    __typename: 'hopSelection'\n  },\n  location: {\n    ra: 0,\n    dec: 0,\n    __typename: 'location'\n  }\n};\nexport const client = new ApolloClient({\n  cache: new InMemoryCache(),\n  link: new HttpLink({\n    fetch\n  }),\n  resolvers\n});\nexport default client;\n\nconst reset = () => {\n  client.writeData({\n    data: _objectSpread({}, defaults)\n  });\n};\n\nreset();\nclient.onResetStore(() => reset());","map":{"version":3,"sources":["/Users/kwilliams/repositories/starhop/utils/apolloClient.js"],"names":["ApolloClient","HttpLink","InMemoryCache","fetch","hopData","require","dsos","resolvers","Query","obj","args","context","info","console","log","input","raFrom","raTo","decFrom","decTo","defaults","hopSelection","__typename","location","ra","dec","client","cache","link","reset","writeData","data","onResetStore"],"mappings":";;;;;;;;;;;;AAAA,SAASA,YAAT,EAAuBC,QAAvB,EAAiCC,aAAjC,QAAsD,cAAtD;AACA,OAAOC,KAAP,MAAkB,oBAAlB;;AAEA,MAAMC,OAAO,GAAGC,OAAO,CAAC,oBAAD,CAAvB;;AACA,MAAMC,IAAI,GAAGD,OAAO,CAAC,iBAAD,CAApB;;AAEA,MAAME,SAAS,GAAG;AAChBC,EAAAA,KAAK,EAAE;AACLF,IAAAA,IAAI,EAAE,CAACG,GAAD,EAAMC,IAAN,EAAYC,OAAZ,EAAqBC,IAArB,KAA8B;AAClCC,MAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ,EAA4BJ,IAAI,CAACK,KAAjC;AACA,YAAM;AAAEC,QAAAA,MAAF;AAAUC,QAAAA,IAAV;AAAgBC,QAAAA,OAAhB;AAAyBC,QAAAA;AAAzB,UAAmCT,IAAI,CAACK,KAA9C;AACA,aAAO,EAAP;AACD;AALI;AADS,CAAlB;AAUA,MAAMK,QAAQ,GAAG;AACfC,EAAAA,YAAY,EAAE;AACZC,IAAAA,UAAU,EAAE;AADA,GADC;AAIfC,EAAAA,QAAQ,EAAE;AACRC,IAAAA,EAAE,EAAE,CADI;AAERC,IAAAA,GAAG,EAAE,CAFG;AAGRH,IAAAA,UAAU,EAAE;AAHJ;AAJK,CAAjB;AAWA,OAAO,MAAMI,MAAM,GAAG,IAAI1B,YAAJ,CAAiB;AACrC2B,EAAAA,KAAK,EAAE,IAAIzB,aAAJ,EAD8B;AAErC0B,EAAAA,IAAI,EAAE,IAAI3B,QAAJ,CAAa;AAAEE,IAAAA;AAAF,GAAb,CAF+B;AAGrCI,EAAAA;AAHqC,CAAjB,CAAf;AAMP,eAAemB,MAAf;;AAEA,MAAMG,KAAK,GAAG,MAAM;AAClBH,EAAAA,MAAM,CAACI,SAAP,CAAiB;AACfC,IAAAA,IAAI,oBACCX,QADD;AADW,GAAjB;AAKD,CAND;;AAQAS,KAAK;AAELH,MAAM,CAACM,YAAP,CAAoB,MAAMH,KAAK,EAA/B","sourcesContent":["import { ApolloClient, HttpLink, InMemoryCache } from 'apollo-boost';\nimport fetch from 'isomorphic-unfetch';\n\nconst hopData = require('../db/hopData.json');\nconst dsos = require('../db/dsos.json');\n\nconst resolvers = {\n  Query: {\n    dsos: (obj, args, context, info) => {\n      console.log('getting Dsos', args.input);\n      const { raFrom, raTo, decFrom, decTo } = args.input;\n      return [];\n    }\n  }\n};\n\nconst defaults = {\n  hopSelection: {\n    __typename: 'hopSelection'\n  },\n  location: {\n    ra: 0,\n    dec: 0,\n    __typename: 'location'\n  }\n};\n\nexport const client = new ApolloClient({\n  cache: new InMemoryCache(),\n  link: new HttpLink({ fetch }),\n  resolvers\n});\n\nexport default client;\n\nconst reset = () => {\n  client.writeData({\n    data: {\n      ...defaults\n    }\n  });\n};\n\nreset();\n\nclient.onResetStore(() => reset());\n"]},"metadata":{},"sourceType":"module"}